import com.android.build.OutputFile
import java.text.DateFormat
import java.text.SimpleDateFormat

apply plugin: "com.android.application"
apply plugin: "io.fabric"

/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "../../node_modules/react-native/react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation
 *   entryFile: "index.android.js",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         'bundleIn${productFlavor}${buildType}'
 *   //         'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"],
 *
 *   // override which node gets called and with what additional arguments
 *   nodeExecutableAndArgs: ["node"],
 *
 *   // supply additional arguments to the packager
 *   extraPackagerArgs: []
 * ]
 */

apply from: "../../node_modules/react-native/react.gradle"
project.ext.vectoricons = [
    iconFontNames: [ 'Ionicons.ttf'] // Name of the font files you want to copy
]

apply from: "../../node_modules/react-native-vector-icons/fonts.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

android {
    signingConfigs {
        release {
            storeFile file('../boundlessgeo.jks')
            storePassword getKeystorePassword()
            keyAlias getSigningKeyAlias()
            keyPassword getSigningKeyPassword()
        }
    }

    compileSdkVersion 25
    buildToolsVersion '25.0.0'

    defaultConfig {
        applicationId "com.uncollector"
        minSdkVersion 16
        targetSdkVersion 22
        versionCode getBuildNumber()
        versionName "0.1"
        multiDexEnabled true
        ndk {
            // include these abi configurations of our libs in the apk
            abiFilters "armeabi-v7a", "x86"
        }
    }

    splits {
        abi {
            // if this is false, the rest of these flags don't do anything
            enable enableSeparateBuildPerCPUArchitecture
            reset()
            // which abis to generate an apk for
            include "armeabi-v7a", "x86"
            // If true, also generate a universal APK
            universalApk false
        }
    }

    buildTypes {
        debug {
            versionNameSuffix "+1-DEBUG"
            applicationIdSuffix ".debug"
        }

        beta {
            versionNameSuffix "+1-BETA"
            applicationIdSuffix ".beta"

            signingConfig signingConfigs.release
        }

        release {
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"

            signingConfig signingConfigs.release
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def file = output.outputFile

            def versionCodes = ["armeabi-v7a":1, "x86":2]
            def abi = output.getFilter(OutputFile.ABI)

            def newFileName = "UNCollector-" + variant.buildType.name + "-" + defaultConfig.versionCode

            if ( variant.buildType.name == "beta" ) {
                newFileName += "_" + getDateTime()
            }

            if ( abi != null ) {
                newFileName += "_" + abi
            }

            newFileName += ".apk"

            output.outputFile = new File(file.parent, newFileName)
        }
    }

    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        pickFirst 'META-INF/maven/com.fasterxml.jackson.core/jackson-core/pom.xml'
        pickFirst 'META-INF/maven/com.fasterxml.jackson.core/jackson-core/pom.properties'
        pickFirst 'META-INF/maven/com.fasterxml.jackson.core/jackson-databind/pom.xml'
        pickFirst 'META-INF/maven/com.fasterxml.jackson.core/jackson-databind/pom.properties'
        pickFirst 'META-INF/maven/com.fasterxml.jackson.core/jackson-annotations/pom.xml'
        pickFirst 'META-INF/maven/com.fasterxml.jackson.core/jackson-annotations/pom.properties'
        pickFirst 'META-INF/maven/commons-io/commons-io/pom.xml'
        pickFirst 'META-INF/maven/commons-io/commons-io/pom.properties'
    }

    dexOptions {
        javaMaxHeapSize "4g"
    }
}

repositories {
    maven { url 'https://maven.fabric.io/public' }
    maven { url 'https://repo.eclipse.org/content/repositories/paho-releases/' }
    maven { url 'https://repo.boundlessgeo.com/release/' }
}

dependencies {
    compile project(':react-native-spatialconnect')
    compile project(':react-native-image-picker')
    compile fileTree(dir: "libs", include: ["*.jar"])
    compile "com.android.support:appcompat-v7:23.0.1"
    compile "com.facebook.react:react-native:+"  // From node_modules
    compile('com.crashlytics.sdk.android:crashlytics:2.6.1@aar') {
      transitive = true;
    }
}

static def getDateTime() {
    DateFormat df = new SimpleDateFormat('yyyy-MM-dd_kk-mm-ss');

    return df.format(new Date());
}

static def getBuildNumber() {
    return "git log --pretty=format:''".execute().text.readLines().size()
}

def getKeystorePassword() {
    def localProperties = project.file('../local.properties')
    if (localProperties.exists()) {
        Properties properties = new Properties()
        localProperties.withInputStream { instr ->
            properties.load(instr)
        }
        return properties.getProperty('key.store.password')
    } else {
        return System.console().readLine("\nKeystore Password: ")
    }
}

def getSigningKeyAlias() {
    def localProperties = project.file('../local.properties')
    if (localProperties.exists()) {
        Properties properties = new Properties()
        localProperties.withInputStream { instr ->
            properties.load(instr)
        }
        return properties.getProperty('key.alias')
    } else {
        return System.console().readLine("\nSigning Key Alias: ")
    }
}

def getSigningKeyPassword() {
    def localProperties = project.file('../local.properties')
    if (localProperties.exists()) {
        Properties properties = new Properties()
        localProperties.withInputStream { instr ->
            properties.load(instr)
        }
        return properties.getProperty('key.alias.password')
    } else {
        return System.console().readLine("\nSigning Key Password: ")
    }
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}
